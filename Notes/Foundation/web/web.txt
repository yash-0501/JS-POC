How the web works

How the web works provides a simplified view of what happens when you view a webpage in a web browser on your computer or phone.

Clients and servers
    Computers connected to the internet are called clients and servers. A simplified way of how they interact might look like this:

    CLIENT sends requests to SERVER, and
    SERVER sends back a response to CLIENT

    Clients are the typical web user's internet-connected devices (for example, your computer connected to your Wi-Fi, or your phone connected to your mobile network) and web-accessing software available on those devices (usually a web browser like Firefox or Chrome).

    Servers are computers that store webpages, sites, or apps. When a client device wants to access a webpage, a copy of the webpage is downloaded from the server onto the client machine to be displayed in the user's web browser.

    The client and server we've described above don't tell the whole story. There are many other parts involved, and we'll describe them below.

    For now, let's imagine that the web is a road. On one end of the road is the client, which is like your house. On the other end of the road is the server, which is a shop you want to buy something from.


In addition to the client and the server, we also need to say hello to (Make sure they talk to each other):

    ->Your internet connection: Allows you to send and receive data on the web. It's basically like the street between your house and the shop.

    ->TCP/IP: Transmission Control Protocol and Internet Protocol are communication protocols that define how data should travel across the internet. This is like the transport mechanisms that let you place an order, go to the shop, and buy your goods. In our example, this is like a car or a bike (or however else you might get around).

    ->DNS: Domain Name System is like an address book for websites. When you type a web address in your browser, the browser looks at the DNS to find the website's IP address before it can retrieve the website. The browser needs to find out which server the website lives on, so it can send HTTP messages to the right place. This is like looking up the address of the shop so you can access it.

    ->HTTP: Hypertext Transfer Protocol is an application protocol that defines a language for clients and servers to speak to each other. This is like the language you use to order your goods.

    ->Component files: A website is made up of many different files, which are like the different parts of the goods you buy from the shop. These files come in two main types:
        -Code files: Websites are built primarily from HTML, CSS, and JavaScript, though you'll meet other technologies a bit later.
        -Assets: This is a collective name for all the other stuff that makes up a website, such as images, music, video, Word documents, and PDFs.


So what happens, exactly?

When you type a web address into your browser:

    1. The browser goes to the DNS server, and finds the real address of the server that the website lives on (you find the address of the shop).

    2. The browser sends an HTTP request message to the server, asking it to send a copy of the website to the client (you go to the shop and order your goods). This message, and all other data sent between the client and the server, is sent across your internet connection using TCP/IP.
    
    3. If the server approves the client's request, the server sends the client a "200 OK" message, which means "Of course you can look at that website! Here it is", and then starts sending the website's files to the browser as a series of small chunks called data packets (the shop gives you your goods, and you bring them back to your house).
    
    4. The browser assembles the small chunks into a complete web page and displays it to you (the goods arrive at your door — new shiny stuff, awesome!).


Order in which component files are parsed:

When browsers send requests to servers for HTML files, those HTML files often contain <link> elements referencing external CSS stylesheets and <script> elements referencing external JavaScript scripts. It's important to know the order in which those files are parsed by the browser as the browser loads the page:

    1. The browser parses the HTML file first, and that leads to the browser recognizing any <link>-element references to external CSS stylesheets and any <script>-element references to scripts.

    2. As the browser parses the HTML, it sends requests back to the server for any CSS files it has found from <link> elements, and any JavaScript files it has found from <script> elements, and from those, then parses the CSS and JavaScript.

    3. The browser generates an in-memory DOM tree from the parsed HTML, generates an in-memory CSSOM structure from the parsed CSS, and compiles and executes the parsed JavaScript.

    4. As the browser builds the DOM tree and applies the styles from the CSSOM tree and executes the JavaScript, a visual representation of the page is painted to the screen, and the user sees the page content and can begin to interact with it.


DNS explained
    Real web addresses aren't the nice, memorable strings you type into your address bar to find your favorite websites. They are special numbers that look like this: 192.0.2.172.

    This is called an IP address, and it represents a unique location on the web. However, it's not very easy to remember, is it? That's why the Domain Name System was invented. This system uses special servers that match up a web address you type into your browser (like "mozilla.org") to the website's real (IP) address.

    Websites can be reached directly via their IP addresses. You can use a DNS lookup tool to find the IP address of a website.

    An IP address is a number used to address each device on an IP network uniquely.

    IP stands for Internet Protocol which is the protocol layer with which the address is associated.

    "IP address" typically still refers to 32-bit IPv4 addresses until IPv6 is deployed more broadly.


Packets explained

    Earlier we used the term "packets" to describe the format in which the data is transferred between the client and server. What do we mean here? Basically, when data is sent across the web, it is sent in thousands of small chunks. There are multiple reasons why data is sent in small packets. They are sometimes dropped or corrupted, and it's easier to replace small chunks when this happens. Additionally, the packets can be routed along different paths, making the exchange faster and allowing many different users to download the same website at the same time. If each website was sent as a single big chunk, only one user could download it at a time, which obviously would make the web very inefficient and not much fun to use.


What is a communication protocol?

To be able to communicate, two parties (be they software, devices, people, etc.) need:

    Syntax (data format and coding)
    Semantics (control information and error handling)
    Timing (speed matching and sequencing)

An online communication protocol contains the same elements. The syntax will be the sequence of characters such as keywords we use for writing the protocols. The semantics is the meaning associated with each of these keywords and finally the timing is the order in which two or more entities exchange these keywords.


Where does HTTP fit into the machine?
HTTP itself runs on top of other protocols. When connecting to a web site, for example at www.example.org, the user agent is using the TCP/IP suite of protocols. The TCP/IP model was designed in 1970 with 4 distinct layers:

    1. Link describes the access to physical media (e.g. using the network card)
    2. Internet describes the envelope and routing of data — how it is packaged (IP)
    3. Transport describes the way the data is delivered from the starting point to the final destination (TCP, UDP)
    4. Application describes the meaning or format of the transferred messages (HTTP)

HTTP is an application protocol that sits above the communication protocol. This is important to keep in mind. Separating the model into independent layers helps to evolve parts of the platform without having to rewrite everything. For example, TCP, a transport protocol, could evolve without having to modify HTTP, the application protocol. 

HTTP has been defined to communicate information between two pieces of software via HTTP messages. The way we shape and design these messages has consequences on the client (the browser for example), the server (web site) and their intermediaries (the proxy).

Port 80 is the default port for connecting to a Web server.


URI: A system for identifying pieces of information on the network.

HTTP Methods: The protocol currently contains 8 methods for requesting a URI: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT. In this article we focused on the most commonly used one: GET

HTTP Headers: The headers are additional data sent by the user agent to give more context about the transaction going on between the client and the server. Some of them will help the server reply in the most appropriate way.


HTTP codes, we are family
    Above we have looked at just a few of the available HTTP codes; there are many others. Some are very well-known, such as 404 Not Found, but others are quite obscure and don’t crop up very often. Whatever the case, the first digit is always an indication of the family of codes they belong to:

        1xx (Informational): Request received, continuing process.
        2xx (Successful): The action was successfully received, understood, and accepted.
        3xx (Redirection): Further action needs to be taken in order to complete the request.
        4xx (Client Error): The request contains bad syntax or cannot be fulfilled.
        5xx (Server Error): The server failed to fulfil an apparently valid request.